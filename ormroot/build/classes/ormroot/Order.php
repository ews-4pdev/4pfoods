<?php



/**
 * Skeleton subclass for representing a row from the 'orders' table.
 *
 * 
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.ormroot
 */
class Order extends BaseOrder {


//  public function getDeliverySiteId(){
//    if( $this->getSubscription()->getUser()->getDoorstep() == 0 )
//    {
//      return parent::getDeliverySiteId();
//    }
//    return DoorStepQuery::create()->findOneByZip( $this->getDeliverySiteId() )->getId();
//  }

  public function getDeliverySite( PropelPDO $con = null, $doQuery = true )
  {
    if( $this->getSubscription()->getUser()->getDoorstep() == 0 )
    {
      return parent::getDeliverySite( $con, $doQuery ); // TODO: Change the autogenerated stub
    }
    return DoorStepQuery::create()->findPk( $this->getDeliverySiteId() );
  }

  public function getAddress()
  {
    if( !$this->getSubscription()->getUser()->getDoorstep() )
                  return $this->getDeliverySite()->getNickname();

    return $this->getSubscription()->getUser()->getFullAddress();
  }

  function getTax(){
    $tax = $this->getSubscription()->getUser()->getStateTax();
    return round( ( $this->getPrice() * $tax/100 ), 2 );
  }

  //  Convenience methods
  function isPaid() { return (bool)($this->getPaidAt()); }
  function getProductName() { return $this->getSubscription()->getProduct()->getTitle(); }
    function getUserBagProductName() { return $this->getUserBag()->getProduct()->getTitle(); }
  function getProductSize() { return $this->getSubscription()->getProduct()->getSize(); }
  function getCustomerFirstName() { return $this->getSubscription()->getUser()->getFirstName(); }
  function getCustomerLastName() { return $this->getSubscription()->getUser()->getLastName(); }
  function getCustomerFullName() { return $this->getCustomerFirstName().' '.$this->getCustomerLastName(); }
  function getUser() { return $this->getSubscription()->getUser(); }

  function getSubscriptionProductTitle(){
    $oUserBag = UserBagQuery::create()
                  ->filterBySubscriptionId( $this->getSubscriptionId() )
                  ->findOneByDate( $this->getDeliveryScheduledFor() );
    if( $oUserBag )
      return $oUserBag->getProduct()->getTitle();

    return $this->getSubscription()->getProduct()->getTitle();
  }

  /**
   *  Can a payment be issued for this order
   */
  function isPayable() {
    $isPayable = true;

    $isPayable &= in_array($this->getStatus(), array('Pending', 'Delivered', 'Donated'));
    $isPayable &= !$this->isPaid();
    $isPayable &= (strtotime($this->getDeliveryScheduledFor('Y-m-d')) <= time());

    return $isPayable;

  }

  /**
   *  For use in views that highlight paid status
   */
  function getPaidAccent() {
    return ($this->isPaid()) ? NULL : 'danger';
  }

  /**
   *  Helpful information in status
   */
  function getVerboseStatus() {

    $status = $this->getStatus();
    if ($status == 'Delivered')
      return 'Delivered on '.$this->getDeliveredAt('M j, Y @ H:ia');
    else
      return $status;

  }

  //  Enforce time stamps on status changes
  function skip() {

    if ($this->getStatus() != 'Pending'){
      return false;
    }

    $this->setStatus('Skipped');
    $this->setSkippedAt(date('Y-m-d H:i:s'));
    $this->save();

  }

  function fail() {

    if ($this->getStatus() != 'Pending')
      return false;

    $this->setStatus('Failed');
    $this->setDeliveredAt(date('Y-m-d H:i:s'));
    $this->save();

  }

  function deliver() {

    if ($this->getStatus() != 'Pending')
      return false;

    $this->setStatus('Delivered');
    $this->setDeliveredAt(date('Y-m-d H:i:s'));
    $this->save();

  }

  function donate() {

    if ($this->getStatus() != 'Pending')
      return false;

    $this->setStatus('Donated');
    $this->setDonatedAt(date('Y-m-d H:i:s'));
    $this->save();

  }

  function getFullPrice() {

    if ($oDiscount = $this->getDiscountApplied())
      return $this->getPrice() + $oDiscount->getAmount();
    else
      return $this->getPrice();

  }

  function applyDiscount(Discount $oDiscount) {

    //  Subscription ID must be set to calculate price data
    if ( !$this->getSubscriptionId() )
      return false;

    //  Get price data - subscription pulled from query because
    //  object is not necessarily saved at this point
    $oSub = SubscriptionQuery::create()->findPk($this->getSubscriptionId());
    $originalPrice = $oSub->getPricePaid( $this->getDeliveryScheduledFor() );
    $discount = $oDiscount->getAmount();

    //  Discount cannot be applied if it has reached capacity
    $iUser = $oSub->getUserId();
    if ($oDiscount->isExpiredForUser($iUser))
      return false;

    //  Check for discounted price over 0
    if ($discount > $originalPrice)
      return false;

    //  Calculate discounted price
    $discountedPrice = $originalPrice - $discount;

    //  Apply discount
    $this->setPrice($discountedPrice);
    $this->setDiscountApplied($oDiscount);

  }

} // Order
