<?php



/**
 * Skeleton subclass for representing a row from the 'bags' table.
 *
 *
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.ormroot
 */
class Bags extends BaseBags{

    function createSyncBagsWithItems($dates){
        // Only get ID's
        $aProducts = ProductQuery::create()
            ->filterByIsPublished(true)
            ->filterByCategoryId($this->getProduct()->getCategoryId())
            ->select('Id')
            ->find();

        foreach ($dates as $date) {
            $date = DateTime::createFromFormat('Y/m/d', $date);

            foreach ($aProducts as $aProduct) {
                $newBag = BagsQuery::create()->filterByDate($date)->filterByProductId($aProduct)->findOneOrCreate();
                $newBag->setSync( false )->setSEmail( false )->save();

                if($this->getId() != $newBag->getId()){
                    $this->deletePreviousBagsItems($newBag);
                    $this->createItemsFromBag($this ,$newBag);
                    BagsQuery::adjustTotalPoints( $newBag->getId() );
                    $this->setSync( false )->setSEmail( false )->save();
                }
            }
        }
    }

    function deletePreviousBagsItems(Bags $bag){
        if( count($bag->getBagsItems()) > 0 ){
            BagsItemQuery::create()
                ->filterByBagId($bag->getId())
                ->delete();
        }
    }

    function createItemsFromBag(Bags $sourceBag, Bags $destinationBag){
        foreach ($sourceBag->getBagsItems() as $bagItem) {
            // Now I have relevant itemPoint For destination Bag
            $aItemPoint = ItemsPointQuery::create()
                            ->filterByProductId( $destinationBag->getProductId() )
                            ->filterByItemId( $bagItem->getItemsPoint()->getItemId() )
                            ->useItemsQuery()
                                ->filterByActive(true)
                            ->endUse()
                            ->findOne();

            if( !is_null( $aItemPoint ) ) {
                // Create and save BagItem Object from $aItemPoint for destination bag
                $nItem = new BagsItem();
                $nItem->setBagId( $destinationBag->getId() )
                    ->setPoints( $aItemPoint->getPoints() )
                    ->setPointId( $aItemPoint->getId() )
                    ->setStatus( $bagItem->getStatus() )
                    ->save();
            }
        }
    }

    public function getSecondaryItems($userBagId){

        // Get User Bag Items Id's
        $userBagItemsPointIds = UserBagItemQuery::create()
                                    ->filterByBagId($userBagId)
                                    ->select('point_id')
                                    ->find();

        return BagsItemQuery::create()
                ->filterByBagId($this->getId())
                ->filterByStatus('Secondary')
                ->filterByPointId($userBagItemsPointIds, Criteria::NOT_IN)
                ->find();
    }

    public function addAlwaysAvailableItems(){
        $items = ItemsQuery::getSecondaryItems ( $this->getProductId() );
        ( new BagsItem() )->saveAlwaysAvailableItems($items, $this->getId());
    }

    public function getItemPoint($id){
        return BagsItemQuery::create()
                ->filterByPointId( $id )
                ->filterByBagId( $this->getId() )
                ->findOne();
    }

    public function preSave(PropelPDO $con = null)
    {
        $date = DateTime::createFromFormat( 'm/d/y', $this->getDate() );
        $today = DateTime::createFromFormat( 'Y-m-d H:i:s', date('Y-m-d H:i:s') );
        $difference = $today->diff( $date );
        $hours = ($difference->days * 24) + $difference->h;
        if( $hours <= ( OrderPeer::CHARGE_DAYS_BEFORE * 24 ) ){
            return false;
        }

        return parent::preSave($con); // TODO: Change the autogenerated stub
    }

}
